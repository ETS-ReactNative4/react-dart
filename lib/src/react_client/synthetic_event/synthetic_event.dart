// ignore_for_file: deprecated_member_use_from_same_package
import 'dart:html';

import 'synthetic_event_wrappers.dart' as event_wrappers;
import 'deprecated/synthetic_event.dart';
export 'deprecated/synthetic_event.dart';

/// An interface for a ReactJS `SyntheticEvent`, which acts as a cross-browser
/// wrapper to normalize the browser's [nativeEvent] ([Event]) behaviors.
///
/// See: <https://reactjs.org/docs/events.html>
class SyntheticEventV2<T extends Event> implements SyntheticEvent {
  /// Indicates whether the [Event] bubbles up through the DOM or not.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles>
  @override
  final bool bubbles;

  /// Indicates whether the [Event] is cancelable or not.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable>
  @override
  final bool cancelable;

  /// A reference to the object that dispatched the event.
  ///
  /// It is different from [currentTarget] when the [Event]
  /// handler is called when [eventPhase] is [Event.BUBBLING_PHASE] or [Event.CAPTURING_PHASE].
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/target>
  @override
  covariant EventTarget target;

  /// Identifies the current target for the event, as the [Event] traverses the DOM.
  ///
  /// It always refers to the [Element] the [Event] handler has been attached to as opposed to [target] which identifies
  /// the [Element] on which the [Event] occurred.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget>
  @override
  covariant EventTarget currentTarget;

  /// Native browser [Event] that this synthetic event instance wraps around.
  @override
  covariant T nativeEvent;

  bool _defaultPrevented;

  dynamic _preventDefault;

  /// Indicates whether or not [preventDefault] was called on the event.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented>
  @override
  bool get defaultPrevented => _defaultPrevented;

  /// Cancels the [Event] if it is [cancelable], without stopping further propagation of the event.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault>
  @override
  void preventDefault() {
    _defaultPrevented = true;
    _preventDefault();
  }

  /// Prevents further propagation of the current event.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation>
  @override
  final dynamic stopPropagation;

  /// Indicates which phase of the [Event] flow is currently being evaluated.
  ///
  /// Possible values:
  ///
  /// > [Event.CAPTURING_PHASE] (1) - The [Event] is being propagated through the [target]'s ancestor objects. This
  /// process starts with the Window, then [HtmlDocument], then the [HtmlHtmlElement], and so on through the [Element]s
  /// until the [target]'s parent is reached. Event listeners registered for capture mode when
  /// [EventTarget.addEventListener] was called are triggered during this phase.
  ///
  /// > [Event.AT_TARGET] (2) - The [Event] has arrived at the [target]. Event listeners registered for this phase are
  /// called at this time. If [bubbles] is `false`, processing the [Event] is finished after this phase is complete.
  ///
  /// > [Event.BUBBLING_PHASE] (3) - The [Event] is propagating back up through the [target]'s ancestors in reverse
  /// order, starting with the parent, and eventually reaching the containing Window. This is known as bubbling, and
  /// occurs only if [bubbles] is `true`. [Event] listeners registered for this phase are triggered during this process.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase>
  @override
  final num eventPhase;

  /// Is `true` when the [Event] was generated by a user action, and `false` when the [Event] was created or modified
  /// by a script or dispatched via [Event.dispatchEvent].
  ///
  /// __Read Only__
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted>
  @override
  final bool isTrusted;

  /// Returns the `Time` _(in milliseconds)_ at which the [Event] was created.
  ///
  /// _Starting with Chrome 49, returns a high-resolution monotonic time instead of epoch time._
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp>
  @override
  final num timeStamp;

  /// Returns a string containing the type of event.
  ///
  /// It is set when the [Event] is constructed and is the name commonly used to refer to the specific event.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/type>
  @override
  final String type;

  SyntheticEventV2(
    this.bubbles,
    this.cancelable,
    this.currentTarget,
    this._defaultPrevented,
    this._preventDefault,
    this.stopPropagation,
    this.eventPhase,
    this.isTrusted,
    this.nativeEvent,
    this.target,
    this.timeStamp,
    this.type,
  );
}

/// JS Interop wrapper for [SyntheticEventV2].
SyntheticEventV2 syntheticEventV2Factory(event_wrappers.SyntheticEvent e) {
  return new SyntheticEventV2(e.bubbles, e.cancelable, e.currentTarget, e.defaultPrevented, () => e.preventDefault(),
      () => e.stopPropagation(), e.eventPhase, e.isTrusted, e.nativeEvent, e.target, e.timeStamp, e.type,);
}

/// An interface for a ReactJS `SyntheticClipboardEvent`, which acts as a cross-browser
/// wrapper to normalize the browser's [nativeEvent] ([ClipboardEvent]) behaviors.
///
/// See: <https://reactjs.org/docs/events.html#clipboard-events>
class SyntheticClipboardEventV2 extends SyntheticEventV2<ClipboardEvent> implements SyntheticClipboardEvent {
  /// A `DataTransfer` object containing the data affected by the user-initiated cut, copy, or paste operation,
  /// along with its MIME type.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent/clipboardData>
  @override
  final DataTransfer clipboardData;

  SyntheticClipboardEventV2(
    bool bubbles,
    bool cancelable,
    EventTarget currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    ClipboardEvent nativeEvent,
    EventTarget target,
    num timeStamp,
    String type,
    this.clipboardData,
  ) : super(
          bubbles,
          cancelable,
          currentTarget,
          defaultPrevented,
          preventDefault,
          stopPropagation,
          eventPhase,
          isTrusted,
          nativeEvent,
          target,
          timeStamp,
          type,
        );
}

/// JS Interop wrapper for [SyntheticClipboardEventV2].
SyntheticClipboardEventV2 syntheticClipboardEventV2Factory(event_wrappers.SyntheticClipboardEvent e) {
  return new SyntheticClipboardEventV2(
      e.bubbles,
      e.cancelable,
      e.currentTarget,
      e.defaultPrevented,
      () => e.preventDefault(),
      () => e.stopPropagation(),
      e.eventPhase,
      e.isTrusted,
      e.nativeEvent,
      e.target,
      e.timeStamp,
      e.type,
      e.clipboardData,);
}

/// An interface for a ReactJS `SyntheticKeyboardEvent`, which acts as a cross-browser
/// wrapper to normalize the browser's [nativeEvent] ([KeyboardEvent]) behaviors.
///
/// See: <https://reactjs.org/docs/events.html#keyboard-events>
class SyntheticKeyboardEventV2 extends SyntheticEventV2<KeyboardEvent> implements SyntheticKeyboardEvent, KeyModifierEventInterface {
  @override
  final bool altKey;
  @override
  final bool ctrlKey;
  @override
  final bool metaKey;
  @override
  final bool shiftKey;

  /// Returns a string representing the character value of the key.
  ///
  /// * Returns a non-empty Unicode string containing that character if the key corresponds to a printable character.
  /// * Returns an empty string if the key doesn't have a printable representation.
  ///
  /// > __Note:__ If the key is used as a macro that inserts multiple characters,
  ///   this attribute's value is the entire string, not just the first character.
  @deprecated
  @override
  final String char;

  /// Returns a number representing the Unicode reference number of the key.
  ///
  /// This attribute is used only when the event [type] is "keypress".
  ///
  /// For keys whose char attribute contains multiple characters,
  /// this is the Unicode value of the first character in that attribute.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/charCode>
  @override
  final num charCode;

  /// Returns the value of the key pressed by the user, taking into consideration the state of modifier keys
  /// such as [shiftKey] as well as the keyboard [locale] and `layout`.
  ///
  /// Its value is determined as follows:
  ///
  /// * If the pressed key has a printed representation, the returned value is a non-empty Unicode character string
  ///   containing the printable representation of the key.
  /// * If the pressed key is a control or special character, the returned value is one of
  ///   the pre-defined key values](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values).
  /// * If the event represents the press of a dead key, the key value must be "Dead".
  /// * Some specialty keyboard keys _(such as the extended keys for controlling media on multimedia keyboards)_
  ///   don't generate key codes on Windows; instead, they trigger `WM_APPCOMMAND` events.
  ///   These events get mapped to DOM keyboard events, and are listed among the "Virtual key codes" for Windows,
  ///   even though they aren't actually key codes.
  /// * If the key cannot be identified, the returned value is "Unidentified".
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key>
  @override
  final String key;

  /// Returns a number representing a system and implementation dependent numerical code identifying
  /// the unmodified value of the pressed key.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode>
  @override
  final num keyCode;

  /// Returns a string representing a locale string indicating the locale the keyboard is configured for.
  ///
  /// This may be the empty string if the browser or device doesn't know the keyboard's locale.
  ///
  /// > __Note:__ This does not describe the locale of the data being entered.
  ///   A user may be using one keyboard layout while typing text in a different language.
  @override
  final String locale;

  /// Returns a number representing the location of the key on the keyboard or other input device.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/location>
  @override
  final num location;

  /// Whether key is being held down such that it is automatically repeating.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat>
  @override
  final bool repeat;

  SyntheticKeyboardEventV2(
    bool bubbles,
    bool cancelable,
    EventTarget currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    KeyboardEvent nativeEvent,
    EventTarget target,
    num timeStamp,
    String type,
    this.altKey,
    this.char,
    this.charCode,
    this.ctrlKey,
    this.locale,
    this.location,
    this.key,
    this.keyCode,
    this.metaKey,
    this.repeat,
    this.shiftKey,
  ) : super(
          bubbles,
          cancelable,
          currentTarget,
          defaultPrevented,
          preventDefault,
          stopPropagation,
          eventPhase,
          isTrusted,
          nativeEvent,
          target,
          timeStamp,
          type,
        );
}

/// JS Interop wrapper for [SyntheticKeyboardEventV2].
SyntheticKeyboardEventV2 syntheticKeyboardEventV2Factory(event_wrappers.SyntheticKeyboardEvent e) {
  return new SyntheticKeyboardEventV2(
      e.bubbles,
      e.cancelable,
      e.currentTarget,
      e.defaultPrevented,
      () => e.preventDefault(),
      () => e.stopPropagation(),
      e.eventPhase,
      e.isTrusted,
      e.nativeEvent,
      e.target,
      e.timeStamp,
      e.type,
      e.altKey,
      e.char,
      e.charCode,
      e.ctrlKey,
      e.locale,
      e.location,
      e.key,
      e.keyCode,
      e.metaKey,
      e.repeat,
      e.shiftKey,);
}

/// An interface for a ReactJS `SyntheticFocusEvent`, which acts as a cross-browser
/// wrapper to normalize the browser's [nativeEvent] ([FocusEvent]) behaviors.
///
/// See: <https://reactjs.org/docs/events.html#focus-events>
class SyntheticFocusEventV2 extends SyntheticEventV2<FocusEvent> implements SyntheticFocusEvent {
  /// An `EventTarget` representing a secondary [target] for this event.
  ///
  /// In some cases _(such as when tabbing in or out a page)_, this property may be set to `null` for security reasons.
  ///
  /// https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/relatedTarget
  @override
  covariant EventTarget relatedTarget;

  SyntheticFocusEventV2(
    bool bubbles,
    bool cancelable,
    EventTarget currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    FocusEvent nativeEvent,
    EventTarget target,
    num timeStamp,
    String type,
    this.relatedTarget,
  ) : super(
          bubbles,
          cancelable,
          currentTarget,
          defaultPrevented,
          preventDefault,
          stopPropagation,
          eventPhase,
          isTrusted,
          nativeEvent,
          target,
          timeStamp,
          type,
        );
}

/// JS Interop wrapper for [SyntheticFocusEventV2].
SyntheticFocusEventV2 syntheticFocusEventV2Factory(event_wrappers.SyntheticFocusEvent e) {
  return new SyntheticFocusEventV2(
      e.bubbles,
      e.cancelable,
      e.currentTarget,
      e.defaultPrevented,
      () => e.preventDefault(),
      () => e.stopPropagation(),
      e.eventPhase,
      e.isTrusted,
      e.nativeEvent,
      e.target,
      e.timeStamp,
      e.type,
      e.relatedTarget,);
}

/// An interface for a ReactJS `SyntheticFocusEvent`, which acts as a cross-browser
/// wrapper to normalize the browser's [nativeEvent] ([Event]) behaviors when the
/// `name` is `onChange`, `onInput`, `onInvalid` or `onSubmit`.
///
/// See: <https://reactjs.org/docs/events.html#form-events>
class SyntheticFormEventV2 extends SyntheticEventV2<Event> implements SyntheticFormEvent {
  SyntheticFormEventV2(
    bool bubbles,
    bool cancelable,
    EventTarget currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    Event nativeEvent,
    EventTarget target,
    num timeStamp,
    String type,
  ) : super(
          bubbles,
          cancelable,
          currentTarget,
          defaultPrevented,
          preventDefault,
          stopPropagation,
          eventPhase,
          isTrusted,
          nativeEvent,
          target,
          timeStamp,
          type,
        );
}

/// JS Interop wrapper for [SyntheticFormEventV2].
SyntheticFormEventV2 syntheticFormEventV2Factory(event_wrappers.SyntheticFormEvent e) {
  return new SyntheticFormEventV2(e.bubbles, e.cancelable, e.currentTarget, e.defaultPrevented, () => e.preventDefault(),
      () => e.stopPropagation(), e.eventPhase, e.isTrusted, e.nativeEvent, e.target, e.timeStamp, e.type,);
}

/// An synthetic interface for a DOM [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer).
class SyntheticDataTransferV2 implements SyntheticDataTransfer {
  /// Gets the type of drag-and-drop operation currently selected or sets the operation to a new type.
  ///
  /// The value must be `none`, `copy`, `link` or `move`.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/dropEffect>
  @override
  final String dropEffect;

  /// Provides all of the types of operations that are possible.
  ///
  /// The value must be `none`, `copy`, `copyLink`, `copyMove`, `link`, `linkMove`, `move`, `all` or `uninitialized`.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/effectAllowed>
  @override
  final String effectAllowed;

  /// Contains a list of all the local files available on the data transfer.
  ///
  /// If the drag operation doesn't involve dragging files, this property is an empty list.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/files>
  @override
  final List<File> files;

  /// Contains a list of the formats that were set in the `dragstart` event.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types>
  @override
  final List<String> types;

  SyntheticDataTransferV2(
    this.dropEffect,
    this.effectAllowed,
    this.files,
    this.types,
  );
}

/// JS Interop wrapper for [SyntheticDataTransferV2].
SyntheticDataTransferV2 syntheticDataTransferV2Factory(event_wrappers.SyntheticDataTransfer dt) {
  if (dt == null) return null;
  List<File> files = [];
  if (dt.files != null) {
    for (int i = 0; i < dt.files.length; i++) {
      files.add(dt.files[i]);
    }
  }
  List<String> types = [];
  if (dt.types != null) {
    for (int i = 0; i < dt.types.length; i++) {
      types.add(dt.types[i]);
    }
  }
  var effectAllowed;
  var dropEffect;

  try {
    // Works around a bug in IE where dragging from outside the browser fails.
    // Trying to access this property throws the error "Unexpected call to method or property access.".
    effectAllowed = dt.effectAllowed;
  } catch (exception) {
    effectAllowed = 'uninitialized';
  }

  try {
    // For certain types of drag events in IE (anything but ondragenter, ondragover, and ondrop), this fails.
    // Trying to access this property throws the error "Unexpected call to method or property access.".
    dropEffect = dt.dropEffect;
  } catch (exception) {
    dropEffect = 'none';
  }

  return new SyntheticDataTransferV2(dropEffect, effectAllowed, files, types);
}

/// An interface for a ReactJS `SyntheticMouseEvent`, which acts as a cross-browser
/// wrapper to normalize the browser's [nativeEvent] ([MouseEvent]) behaviors.
///
/// See: <https://reactjs.org/docs/events.html#mouse-events>
class SyntheticMouseEventV2 extends SyntheticEventV2<MouseEvent> implements SyntheticMouseEvent, KeyModifierEventInterface {
  @override
  final bool altKey;

  @override
  final bool ctrlKey;

  @override
  final bool metaKey;

  @override
  final bool shiftKey;

  /// A `DataTransfer` object containing the data affected by the drag operation initiated using a mouse.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent/clipboardData>
  @override
  final SyntheticDataTransferV2 dataTransfer;

  /// The secondary [target] for the event, if there is one.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget>
  @override
  covariant EventTarget relatedTarget;

  /// The button number that was pressed _(if applicable)_ when the mouse event was fired.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button>
  @override
  final num button;

  /// The buttons being depressed _(if any)_ when the mouse event was fired.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons>
  @override
  final num buttons;

  /// The X coordinate of the mouse pointer in local _(DOM content)_ coordinates.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX>
  @override
  final num clientX;

  /// The Y coordinate of the mouse pointer in local _(DOM content)_ coordinates.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY>
  @override
  final num clientY;

  /// The X coordinate of the mouse pointer relative to the whole document.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageX>
  @override
  final num pageX;

  /// The Y coordinate of the mouse pointer relative to the whole document.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageY>
  @override
  final num pageY;

  /// The X coordinate of the mouse pointer in global (screen) coordinates.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenX>
  @override
  final num screenX;

  /// The Y coordinate of the mouse pointer in global (screen) coordinates.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenY>
  @override
  final num screenY;

  SyntheticMouseEventV2(
    bool bubbles,
    bool cancelable,
    EventTarget currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    MouseEvent nativeEvent,
    EventTarget target,
    num timeStamp,
    String type,
    this.altKey,
    this.button,
    this.buttons,
    this.clientX,
    this.clientY,
    this.ctrlKey,
    this.dataTransfer,
    this.metaKey,
    this.pageX,
    this.pageY,
    this.relatedTarget,
    this.screenX,
    this.screenY,
    this.shiftKey,
  ) : super(
          bubbles,
          cancelable,
          currentTarget,
          defaultPrevented,
          preventDefault,
          stopPropagation,
          eventPhase,
          isTrusted,
          nativeEvent,
          target,
          timeStamp,
          type,
        );
}

/// JS Interop wrapper for [SyntheticMouseEventV2].
SyntheticMouseEventV2 syntheticMouseEventV2Factory(event_wrappers.SyntheticMouseEvent e) {
  SyntheticDataTransferV2 dt = syntheticDataTransferV2Factory(e.dataTransfer);
  return new SyntheticMouseEventV2(
    e.bubbles,
    e.cancelable,
    e.currentTarget,
    e.defaultPrevented,
    () => e.preventDefault(),
    () => e.stopPropagation(),
    e.eventPhase,
    e.isTrusted,
    e.nativeEvent,
    e.target,
    e.timeStamp,
    e.type,
    e.altKey,
    e.button,
    e.buttons,
    e.clientX,
    e.clientY,
    e.ctrlKey,
    dt,
    e.metaKey,
    e.pageX,
    e.pageY,
    e.relatedTarget,
    e.screenX,
    e.screenY,
    e.shiftKey,
  );
}

/// An interface for a ReactJS `SyntheticPointerEvent`, which acts as a cross-browser
/// wrapper to normalize the browser's [nativeEvent] ([PointerEvent]) behaviors.
///
/// See: <https://reactjs.org/docs/events.html#pointer-events>
class SyntheticPointerEventV2 extends SyntheticEventV2<PointerEvent> implements SyntheticPointerEvent {
  /// A unique identifier for the pointer causing the event.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId>
  @override
  final num pointerId;

  /// The width _(magnitude on the X axis)_, in CSS pixels, of the contact geometry of the pointer.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width>
  @override
  final num width;

  /// The height _(magnitude on the Y axis)_, in CSS pixels, of the contact geometry of the pointer.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height>
  @override
  final num height;

  /// The normalized pressure of the pointer input in the range 0 to 1,
  /// where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure>
  @override
  final num pressure;

  /// The normalized tangential pressure of the pointer input
  /// _(also known as barrel pressure or [cylinder stress](https://en.wikipedia.org/wiki/Cylinder_stress))_
  /// in the range -1 to 1, where 0 is the neutral position of the control.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tangentialPressure>
  @override
  final num tangentialPressure;

  /// The plane angle _(in degrees, in the range of -90 to 90)_ between the Y-Z plane and the plane containing
  /// both the pointer (e.g. pen stylus) axis and the Y axis.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX>
  @override
  final num tiltX;

  /// The plane angle _(in degrees, in the range of -90 to 90)_ between the X-Z plane and the plane containing
  /// both the pointer _(e.g. pen stylus)_ axis and the X axis.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY>
  @override
  final num tiltY;

  /// The clockwise rotation of the pointer _(e.g. pen stylus)_ around its major axis in degrees,
  /// with a value in the range 0 to 359.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/twist>
  @override
  final num twist;

  /// Indicates the device type that caused the event _(mouse, pen, touch, etc.)_
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType>
  @override
  final String pointerType;

  /// Indicates if the pointer represents the primary pointer of this pointer type.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary>
  @override
  final bool isPrimary;

  SyntheticPointerEventV2(
    bool bubbles,
    bool cancelable,
    EventTarget currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    PointerEvent nativeEvent,
    EventTarget target,
    num timeStamp,
    String type,
    this.pointerId,
    this.width,
    this.height,
    this.pressure,
    this.tangentialPressure,
    this.tiltX,
    this.tiltY,
    this.twist,
    this.pointerType,
    this.isPrimary,
  ) : super(
          bubbles,
          cancelable,
          currentTarget,
          defaultPrevented,
          preventDefault,
          stopPropagation,
          eventPhase,
          isTrusted,
          nativeEvent,
          target,
          timeStamp,
          type,
        ) {}
}

/// JS Interop wrapper for [SyntheticPointerEventV2].
SyntheticPointerEventV2 syntheticPointerEventV2Factory(event_wrappers.SyntheticPointerEvent e) {
  return new SyntheticPointerEventV2(
    e.bubbles,
    e.cancelable,
    e.currentTarget,
    e.defaultPrevented,
    () => e.preventDefault(),
    () => e.stopPropagation(),
    e.eventPhase,
    e.isTrusted,
    e.nativeEvent,
    e.target,
    e.timeStamp,
    e.type,
    e.pointerId,
    e.width,
    e.height,
    e.pressure,
    e.tangentialPressure,
    e.tiltX,
    e.tiltY,
    e.twist,
    e.pointerType,
    e.isPrimary,
  );
}

/// An interface for a ReactJS `SyntheticTouchEvent`, which acts as a cross-browser
/// wrapper to normalize the browser's [nativeEvent] ([TouchEvent]) behaviors.
///
/// See: <https://reactjs.org/docs/events.html#touch-events>
class SyntheticTouchEventV2 extends SyntheticEventV2<TouchEvent> implements SyntheticTouchEvent, KeyModifierEventInterface {
  @override
  final bool altKey;

  @override
  final bool ctrlKey;

  @override
  final bool metaKey;

  @override
  final bool shiftKey;

  /// A `TouchList` of all the `Touch` objects representing individual points of contact whose
  /// states changed between the previous touch event and this one.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/changedTouches>
  @override
  final TouchList changedTouches;

  /// A `TouchList` of all the `Touch` objects that are both currently in contact with the touch
  /// surface and were also started on the same element that is the [target] of the event.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/targetTouches>
  @override
  final TouchList targetTouches;

  /// A `TouchList` of all the `Touch` objects representing all current points of contact with the surface,
  /// regardless of [target] or changed status.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches>
  @override
  final TouchList touches;

  SyntheticTouchEventV2(
    bool bubbles,
    bool cancelable,
    EventTarget currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    TouchEvent nativeEvent,
    EventTarget target,
    num timeStamp,
    String type,
    this.altKey,
    this.ctrlKey,
    this.metaKey,
    this.shiftKey,
    this.changedTouches,
    this.targetTouches,
    this.touches,
  ) : super(
          bubbles,
          cancelable,
          currentTarget,
          defaultPrevented,
          preventDefault,
          stopPropagation,
          eventPhase,
          isTrusted,
          nativeEvent,
          target,
          timeStamp,
          type,
        );
}

/// JS Interop wrapper for [SyntheticTouchEventV2].
SyntheticTouchEventV2 syntheticTouchEventV2Factory(event_wrappers.SyntheticTouchEvent e) {
  return new SyntheticTouchEventV2(
    e.bubbles,
    e.cancelable,
    e.currentTarget,
    e.defaultPrevented,
    () => e.preventDefault(),
    () => e.stopPropagation(),
    e.eventPhase,
    e.isTrusted,
    e.nativeEvent,
    e.target,
    e.timeStamp,
    e.type,
    e.altKey,
    e.ctrlKey,
    e.metaKey,
    e.shiftKey,
    e.changedTouches,
    e.targetTouches,
    e.touches,
  );
}

/// An interface for a ReactJS `SyntheticTransitionEvent`, which acts as a cross-browser
/// wrapper to normalize the browser's [nativeEvent] ([TransitionEvent]) behaviors.
///
/// See: <https://reactjs.org/docs/events.html#transition-events>
class SyntheticTransitionEventV2 extends SyntheticEventV2<TransitionEvent> implements SyntheticTransitionEvent {
  /// Returns the CSS property name associated with the transition.
  @override
  final String propertyName;

  /// Returns a number giving the amount of time the transition has been running,
  /// in seconds, when this event fired.
  ///
  /// This value is not affected by the `transition-delay` property.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/elapsedTime>
  @override
  final num elapsedTime;

  /// Returns a string, starting with '::', containing the name of the pseudo-element the animation runs on.
  ///
  /// If the transition doesn't run on a pseudo-element but on the element, an empty string: ''.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/pseudoElement>
  @override
  final String pseudoElement;

  SyntheticTransitionEventV2(
    bool bubbles,
    bool cancelable,
    EventTarget currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    TransitionEvent nativeEvent,
    EventTarget target,
    num timeStamp,
    String type,
    this.propertyName,
    this.elapsedTime,
    this.pseudoElement,
  ) : super(
          bubbles,
          cancelable,
          currentTarget,
          defaultPrevented,
          preventDefault,
          stopPropagation,
          eventPhase,
          isTrusted,
          nativeEvent,
          target,
          timeStamp,
          type,
        ) {}
}

/// JS Interop wrapper for [SyntheticTransitionEventV2].
SyntheticTransitionEventV2 syntheticTransitionEventV2Factory(event_wrappers.SyntheticTransitionEvent e) {
  return new SyntheticTransitionEventV2(
    e.bubbles,
    e.cancelable,
    e.currentTarget,
    e.defaultPrevented,
    () => e.preventDefault(),
    () => e.stopPropagation(),
    e.eventPhase,
    e.isTrusted,
    e.nativeEvent,
    e.target,
    e.timeStamp,
    e.type,
    e.propertyName,
    e.elapsedTime,
    e.pseudoElement,
  );
}

/// An interface for a ReactJS `SyntheticAnimationEvent`, which acts as a cross-browser
/// wrapper to normalize the browser's [nativeEvent] ([AnimationEvent]) behaviors.
///
/// See: <https://reactjs.org/docs/events.html#animation-events>
class SyntheticAnimationEventV2 extends SyntheticEventV2<AnimationEvent> implements SyntheticAnimationEvent {
  /// Returns the CSS property name associated with the animation.
  @override
  final String animationName;

  /// Returns a number giving the amount of time the animation has been running,
  /// in seconds, when this event fired.
  ///
  /// This value is not affected by the `transition-delay` property.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/elapsedTime>
  @override
  final num elapsedTime;

  /// Returns a string, starting with '::', containing the name of the pseudo-element the animation runs on.
  ///
  /// If the transition doesn't run on a pseudo-element but on the element, an empty string: ''.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/pseudoElement>
  @override
  final String pseudoElement;

  SyntheticAnimationEventV2(
    bool bubbles,
    bool cancelable,
    EventTarget currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    AnimationEvent nativeEvent,
    EventTarget target,
    num timeStamp,
    String type,
    this.animationName,
    this.elapsedTime,
    this.pseudoElement,
  ) : super(
          bubbles,
          cancelable,
          currentTarget,
          defaultPrevented,
          preventDefault,
          stopPropagation,
          eventPhase,
          isTrusted,
          nativeEvent,
          target,
          timeStamp,
          type,
        ) {}
}

/// JS Interop wrapper for [SyntheticAnimationEventV2].
SyntheticAnimationEventV2 syntheticAnimationEventV2Factory(event_wrappers.SyntheticAnimationEvent e) {
  return new SyntheticAnimationEventV2(
    e.bubbles,
    e.cancelable,
    e.currentTarget,
    e.defaultPrevented,
    () => e.preventDefault(),
    () => e.stopPropagation(),
    e.eventPhase,
    e.isTrusted,
    e.nativeEvent,
    e.target,
    e.timeStamp,
    e.type,
    e.animationName,
    e.elapsedTime,
    e.pseudoElement,
  );
}

/// An interface for a ReactJS `SyntheticUIEvent`, which acts as a cross-browser
/// wrapper to normalize the browser's [nativeEvent] ([UIEvent]) behaviors.
///
/// See: <https://reactjs.org/docs/events.html#ui-events>
class SyntheticUIEventV2 extends SyntheticEventV2<UIEvent> implements SyntheticUIEvent {
  /// Returns a number with details about the event, depending on the event type.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail>
  @override
  final num detail;

  /// Returns a `WindowProxy` that contains the view that generated the event.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view>
  @override
  final Window view;

  SyntheticUIEventV2(
    bool bubbles,
    bool cancelable,
    EventTarget currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    UIEvent nativeEvent,
    EventTarget target,
    num timeStamp,
    String type,
    this.detail,
    this.view,
  ) : super(
          bubbles,
          cancelable,
          currentTarget,
          defaultPrevented,
          preventDefault,
          stopPropagation,
          eventPhase,
          isTrusted,
          nativeEvent,
          target,
          timeStamp,
          type,
        );
}

/// JS Interop wrapper for [SyntheticUIEventV2].
SyntheticUIEventV2 syntheticUIEventV2Factory(event_wrappers.SyntheticUIEvent e) {
  return new SyntheticUIEventV2(
    e.bubbles,
    e.cancelable,
    e.currentTarget,
    e.defaultPrevented,
    () => e.preventDefault(),
    () => e.stopPropagation(),
    e.eventPhase,
    e.isTrusted,
    e.nativeEvent,
    e.target,
    e.timeStamp,
    e.type,
    e.detail,
    e.view,
  );
}

/// An interface for a ReactJS `SyntheticWheelEvent`, which acts as a cross-browser
/// wrapper to normalize the browser's [nativeEvent] ([WheelEvent]) behaviors.
///
/// See: <https://reactjs.org/docs/events.html#wheel-events>
class SyntheticWheelEventV2 extends SyntheticEventV2<WheelEvent> implements SyntheticWheelEvent {
  /// Returns a number representing the horizontal scroll amount.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaX>
  @override
  final num deltaX;

  /// Returns a number representing the vertical scroll amount.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaY>
  @override
  final num deltaY;

  /// Returns a number representing the =scroll amount for the z-axis.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaZ>
  @override
  final num deltaZ;

  /// Returns a number representing the unit of the delta* values' scroll amount.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode>
  @override
  final num deltaMode;

  SyntheticWheelEventV2(
    bool bubbles,
    bool cancelable,
    EventTarget currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    WheelEvent nativeEvent,
    EventTarget target,
    num timeStamp,
    String type,
    this.deltaX,
    this.deltaMode,
    this.deltaY,
    this.deltaZ,
  ) : super(
          bubbles,
          cancelable,
          currentTarget,
          defaultPrevented,
          preventDefault,
          stopPropagation,
          eventPhase,
          isTrusted,
          nativeEvent,
          target,
          timeStamp,
          type,
        );
}

/// JS Interop wrapper for [SyntheticWheelEventV2].
SyntheticWheelEventV2 syntheticWheelEventV2Factory(event_wrappers.SyntheticWheelEvent e) {
  return new SyntheticWheelEventV2(
    e.bubbles,
    e.cancelable,
    e.currentTarget,
    e.defaultPrevented,
    () => e.preventDefault(),
    () => e.stopPropagation(),
    e.eventPhase,
    e.isTrusted,
    e.nativeEvent,
    e.target,
    e.timeStamp,
    e.type,
    e.deltaX,
    e.deltaMode,
    e.deltaY,
    e.deltaZ,
  );
}

// @private
abstract class KeyModifierEventInterface {
  /// Whether the <kbd>Alt</kbd> (<kbd>Option<kbd> or <kbd>⌥<kbd> on OS X) key was active when the event was generated.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/altKey>
  bool get altKey;

  /// Whether the <kbd>Ctrl</kbd> key was active when the event was generated.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/ctrlKey>
  bool get ctrlKey;

  /// Whether the "Meta" key
  /// (on Mac keyboards, the <kbd>⌘</kbd> Command key; on Windows keyboards, the <kbd>⊞</kbd> Windows key)
  /// was active when the event was generated.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey>
  bool get metaKey;

  /// Whether the <kbd>Shift</kbd> key was active when the event was generated.
  ///
  /// > See: <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/shiftKey>
  bool get shiftKey;
}
